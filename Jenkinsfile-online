#!groovy
import groovy.json.JsonOutput

node('java-slave-1') {
      def repoName = "ci"
      def microserviceId = 53443 //微服务yuztestenv
      def container_id = 53448   //微服务的容器id
      def token = getCombToken("076d22a2166f4bbfa3daf4bc40b2e25a","c4d6ad2379d24d2fb3e97f9632171708")//用户:qaqance_pub
      def originPath = getCombImageLatestPath(token,"ci")//原始镜像
      def newPath = "hub.c.163.com/netease_comb/ci:master20170114030036705"    //需要去掉值
      println("##The original image path is : "+originPath)
//准备测试代码与工具      
  stage('prepare') {
      sh 'pwd'
//      sh 'apt-get update -y ; apt-get install jq' 
  }
//等待由gitpush触发的镜像构建完成
//  stage('check image') {
//       def boolean isready = waitImageReady(token,repoName,originPath)  	
//    if(isready){  
	  //return newPath = getCombImageLatestPath(token,"ci")
	  //println("##The new Path is : "+newPath)
    //}else{
	//  println("##Failed to get the image")
    //}
  //}
//将最新的镜像部署成服务
  stage('upgrade service') {
	def status_code = updateCombServiceImage(token,microserviceId,container_id,newPath)
	println("#######"+status_code)
	assert status_code == "200"
	def isready = waitCombServiceReady(token,microserviceId)
	assert isready 
  }
//等待服务创建成功
//执行测试      
  stage('ci test') {
        sh 'rm -rf hooktest'
        sh "git clone ssh://yu.zhang@git.hz.netease.com:22222/yu.zhang/hooktest.git" 
        sh 'mvn clean -f hooktest/NCE-WEB-TEST/pom.xml test -Dmaven.test.failure.ignore=true -DsuitXmlFile=./hooktest/NCE-WEB-TEST/src/test/resources/xml/microserviceopenapi.xml'
  }
}
    def String getCombToken(app_key, app_secret) {
      def combTokenURL = 'https://open.c.163.com/api/v1/token'
      def header = 'Content-Type:application/json'
      def payload = JsonOutput.toJson([app_key      : app_key,
                                       app_secret   : app_secret])
      sh "curl -X POST -H \'${header}\' -d \'${payload}\' ${combTokenURL} > json"
      sh 'cat json |grep -Po \'(?<="token":")[^"]*\' > token'
      def token = readFile('token').trim()
      return token
     }
          
    def String getCombImageLatestPath(token, repoName) {
      def combGetImageURL = 'https://open.c.163.com/api/v1/microservices/images'
      def header  = "Authorization:Token ${token}"
      sh "curl -H \'${header}\'  ${combGetImageURL} > json"
      sh 'jq -r \'.[][] | select(.repo_name=="ci") | .image_path\' json |  sed -n \'1p\' > image_path'
      def image_path = readFile('image_path').trim()
      return image_path
     }      

    def String updateCombServiceImage(token,microserviceId,container_id,image_path){
      def updateCombServiceURL= "https://open.c.163.com/api/v1/microservices/${microserviceId}/actions/update-image"
      def header1 = "Authorization:Token ${token}"
      def header2 = 'Content-Type:application/json'
      def payload = JsonOutput.toJson([min_ready_seconds  : "20",
                                       container_images   : [[
					      "container_id":container_id,
					      "image_path": image_path]] 
				      ])
      sh "curl -X PUT -H \'${header1}\' -H \'${header2}\' -d \'${payload}\' \'${updateCombServiceURL}\' -i | sed -n \'1p\' | awk \'{print\$2}\' > status_code"
      def status_code = readFile('status_code').trim()
      return status_code
    }
          
    def String getCombServiceStatus(token, microserviceId) {
      def combCreateServiceURL= "https://open.c.163.com/api/v1/microservices/${microserviceId}"
      def header = "Authorization:Token ${token}"
      sh "curl  -H \'${header}\'  ${combCreateServiceURL} > json"
      sh 'cat json | jq -r .service_info.status'
      def status = readFile('json').trim()
      println("##service status is "+status_code)
      return status
    }
    def String deleteCombService(microserviceId) {
      def combDeleteServiceURL= "https://open.c.163.com/api/v1/microservices/${microserviceId}?free_ip=false"
      def header = "Authorization:Token ${token}"
      sh "curl -X DELETE -H \'${header}\' ${combDeleteServiceURL} > json"  
      sh 'cat json | jq .code >　code'
      def code = readfILE.('code').trim()
      return code
    }
    def boolean waitImageReady(token,repoName,originPath){
            long startTime = System.currentTimeMillis()
		boolean flag = false
		try {
		      while (System.currentTimeMillis() - startTime < 60*10*1000) {
		      theLatestPath = getCombImageLatestPath(token,repoName)
		          if (theLatestPath != originPath){
				      println("##The new image is ready !!")
                              	      flag = true
				      break
		          } else {
				      println("##The new image is not ready")
                              	      sleep 10				
				 }
		       }
	    	  if (false == flag)
   		     println("##Image is timeout")
		} catch (Exception e) {
			println(e)
			flag = false
		} 
	    return flag
    }
    def boolean waitCombServiceReady(token,microserviceId){
            long startTime = System.currentTimeMillis()
		boolean flag = false
		try {
		      while (System.currentTimeMillis() - startTime < 60*10*1000) {
		      currentStatus = getCombServiceStatus(token, microserviceId)
		          if (currentStatus == "updating"||currentStatus == "create_succ"||currentStatus == "update_succ"){
				      println("##The new service is updating !!")
                              	      sleep 10
				      
		          } else {
				      assert currentStatus == "update_succ"
				      println("##The service is ready")
                              	      flag = true				
				 }
		       }
	    	     if (false == flag)
   		     println("##Service is timeout")
		} catch (Exception e) {
			println(e)
			flag = false
		} 	        
       return flag
    }
